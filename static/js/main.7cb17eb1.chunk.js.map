{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text1","text","result","results","bmi","setState","Math","round","pow","alert","sets","e","target","id","value","AppBar","position","align","color","Toolbar","Typography","variant","Container","maxWidth","style","marginTop","TextField","label","onChange","this","type","inputProps","min","step","Button","onClick","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAqGeA,E,2MAjGbC,MAAQ,CACNC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,QAAQ,I,EAyBVC,IAAM,WAEqB,IAArB,EAAKL,MAAMC,OAAmC,IAApB,EAAKD,MAAME,KAEvC,EAAKI,SAAS,CACZH,OAAQI,KAAKC,MAAS,EAAKR,MAAMC,MAAUM,KAAKE,IAAK,EAAKT,MAAME,KAAO,IAAM,MAMtD,IAArB,EAAKF,MAAMC,OAAmC,IAApB,EAAKD,MAAME,KACvCQ,MAAM,sCAEsB,IAArB,EAAKV,MAAMC,MAClBS,MAAM,2BAEqB,IAApB,EAAKV,MAAME,MAClBQ,MAAM,4B,EAOZC,KAAO,SAACC,GACN,EAAKN,SAAL,eACGM,EAAEC,OAAOC,GAAKF,EAAEC,OAAOE,S,wEAGlB,IAAD,OAEP,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,SAASC,MAAM,aAC7C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAMJ,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,MAAO,CAAEC,UAAW,QAC3C,6BACA,kBAACC,EAAA,EAAD,CAAWb,GAAG,QAAQc,MAAM,aAAaN,QAAQ,WAAWO,SAAU,SAACjB,GAAD,OAAO,EAAKD,KAAKC,IACrFG,MAAOe,KAAK9B,MAAMC,MAAO8B,KAAK,SAC9BC,WAAY,CAAEC,IAAK,IAAKC,KAAM,OAEhC,6BAAM,6BACN,kBAACP,EAAA,EAAD,CAAWb,GAAG,OAAOc,MAAM,aAAaN,QAAQ,WAAWO,SAAU,SAACjB,GAAD,OAAO,EAAKD,KAAKC,IACpFG,MAAOe,KAAK9B,MAAME,KAAM6B,KAAK,SAC7BC,WAAY,CAAEC,IAAK,IAAKC,KAAM,OAEhC,6BAAM,6BACN,kBAACC,EAAA,EAAD,CAAQb,QAAQ,YAAYR,GAAG,SAASsB,QAAS,kBAAM,EAAK/B,OAAOa,MAAM,SACvEC,MAAM,aADR,WAIA,6BAAM,6BAEN,kBAACQ,EAAA,EAAD,CAAWb,GAAG,iBAAiBc,MAAM,SAASG,KAAK,SAAST,QAAQ,WAAWe,YAAY,SACzFtB,MAAOe,KAAK9B,MAAMG,e,GA3FZmC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7cb17eb1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { TextField, Button, AppBar, Toolbar, Typography, Container } from '@material-ui/core'\n\nclass App extends Component {\n  state = {\n    text1: '0',\n    text: '0',\n    result: '0',\n    results:''\n  }\n  // bmi = () => {\n\n  //   if (this.state.text1 !== 0 && this.state.text !== 0) {\n\n  //     this.setState({\n  //       result: ((this.state.text1)) / Math.pow((this.state.text / 100), 2)\n  //     })\n  //   }\n  //   else {\n  //     if (this.state.text1 === 0 && this.state.text === 0) {\n  //       alert(\"Please enter the Height and Weight\");\n  //     }\n  //     else {\n  //       if (this.state.text1 !== 0) {\n  //         alert(\"Please enter the Height\");\n  //       }\n  //       if (this.state.text !== 0) {\n  //         alert(\"Please enter the Weight\");\n  //       }\n  //     }\n  //   }\n  // }\n\n  bmi = () => {\n\n    if (this.state.text1 !== 0 && this.state.text !== 0) {\n\n      this.setState({\n        result: Math.round((((this.state.text1)) / Math.pow((this.state.text / 100), 2)))\n      \n      })\n      // var results = this.state.result.toFixed(2);\n    }\n    else {\n      if (this.state.text1 === 0 && this.state.text === 0) {\n        alert(\"Please enter the Height and Weight\");\n      }\n      else if (this.state.text1 !== 0) {\n        alert(\"Please enter the Height\");\n      }\n      else if (this.state.text !== 0) {\n        alert(\"Please enter the Weight\");\n      }\n\n    }\n\n    //  this.state.results = this.state.result.toFixed(2);\n  }\n  sets = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  render() {\n\n    return (\n      <div>\n        <AppBar position=\"static\" align=\"center\" color=\"secondary\">\n          <Toolbar>\n            <Typography variant=\"h6\" >\n              BMI Calculator\n           </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Container maxWidth=\"sm\" style={{ marginTop: \"10%\" }}>\n          <br />\n          <TextField id=\"text1\" label=\"Weight(kg)\" variant=\"outlined\" onChange={(e) => this.sets(e)}\n            value={this.state.text1} type=\"number\"\n            inputProps={{ min: \"0\", step: \"1\" }}\n          />\n          <br /><br />\n          <TextField id=\"text\" label=\"Height(cm)\" variant=\"outlined\" onChange={(e) => this.sets(e)}\n            value={this.state.text} type=\"number\" \n            inputProps={{ min: \"0\", step: \"1\" }}\n            />\n          <br /><br />\n          <Button variant=\"contained\" id=\"result\" onClick={() => this.bmi()} align=\"center\"\n            color=\"secondary\" >\n            Results\n        </Button>\n          <br /><br />\n\n          <TextField id=\"outlined-basic\" label=\"Result\" type=\"number\" variant=\"outlined\" placeholder=\"Result\"\n            value={this.state.result} />\n\n        </Container >\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}